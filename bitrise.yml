format_version: 1.1.0
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - GO15VENDOREXPERIMENT: "1"
  - GO_PROJECT_PATH: github.com/bitrise-io/bitrise-webhooks
  - PORT: "4000"
  # if set to "yes" we'll use github.com/codegangsta/gin to live-reload the code on change
  - IS_USE_GIN: "yes"
  # optionally, define these in your .bitrise.secrets.yml
  - SEND_REQUEST_TO: $SEND_REQUEST_TO

workflows:
  start:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -x
            go get github.com/tools/godep
            godep go install $GO_PROJECT_PATH
            if [ "$IS_USE_GIN" == "yes" ] ; then
              go get github.com/codegangsta/gin
              gin --godep --port $PORT
            else
              bitrise-webhooks -port $PORT
            fi

  _install_test_tools:
    steps:
    - script:
        title: Install required testing tools
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -x

            # Install dependencies
            go get -u github.com/tools/godep

            # Check for unhandled errors
            go get -u github.com/kisielk/errcheck

            # Go lint
            go get -u github.com/golang/lint/golint
  test:
    before_run:
    - _install_test_tools
    steps:
    - script:
        title: Print infos for the test
        inputs:
        - content: |-
            set -x
            go version
            echo $GO15VENDOREXPERIMENT
    - script:
        title: GOLIST_WITHOUT_VENDOR
        inputs:
        - content: |-
            set -e
            set -x
            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Go Test
        inputs:
        - content: go test ./...
    - script:
        title: Go Vet
        inputs:
        - content: go vet ./...
    - script:
        title: Err check
        inputs:
        - content: errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go Lint
        inputs:
        - content: |-
            #!/bin/bash
            set -e

            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"

  godeps-update:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -x
            godep save ./...

  create-release:
    steps:
    - ensure-clean-git:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -e

            echo
            echo 'How to roll-back?'
            echo '* if you want to undo the last commit you can call:'
            echo '    $ git reset --hard HEAD~1'
            echo '* to roll back to the remote state:'
            echo '    $ git reset --hard origin/[branch-name]'
            echo

            set -x
            version_file_path="./version/version.go"
            release_start_branch='master'
            release_destination_branch='prod'
            current_branch="$(git symbolic-ref --short HEAD)"
            if [[ "$current_branch" != "${release_start_branch}" ]] ; then
              echo " [!] You have to be on the ${release_start_branch} branch to create a release!"
              exit 1
            fi

            current_version="$(go run _scripts/get_version.go -file "$version_file_path")"
            bumped_version=$(ruby -e "splits='${current_version}'.split('.');major=splits[0];minor=splits[1];patch=splits[2];puts \"#{major}.#{minor}.#{patch.to_i.next}\"")

            bash _scripts/set_version.sh "$version_file_path" "$bumped_version"

            git add "$version_file_path"
            git commit -m "v${bumped_version}"

            git checkout ${release_destination_branch}
            # git merge ${release_start_branch} --no-ff -m "Merge ${release_start_branch} into ${release_destination_branch}, release: v${bumped_version}"
            git merge ${release_start_branch} -m "Merge ${release_start_branch} into ${release_destination_branch}, release: v${bumped_version}"
            git tag "${bumped_version}"

            git checkout ${release_start_branch}
